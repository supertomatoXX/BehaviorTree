Tick 

 A new Tick object is instantiated every tick by BehaviorTree. It is passed
 as parameter to the nodes through the tree during the traversal.

 The role of the Tick class is to store the instances of tree, debug,
 target and blackboard. So, all nodes can access these informations.

 For internal uses, the Tick also is useful to store the open node after
 the tick signal, in order to let `BehaviorTree` to keep track and close
 them when necessary.

 This class also makes a bridge between nodes and the debug, passing the
 node state to the debug if the last is provided.

BlackBard

 The Blackboard is the memory structure required by `BehaviorTree` and its
 nodes. It only have 2 public methods: `set` and `get`. These methods works
 in 3 different contexts: global, per tree, and per node per tree.

 Suppose you have two different trees controlling a single object with a
 single blackboard, then:

 - In the global context, all nodes will access the stored information.
 - In per tree context, only nodes sharing the same tree share the stored
   information.
 - In per node per tree context, the information stored in the blackboard
   can only be accessed by the same node that wrote the data.

 The context is selected indirectly by the parameters provided to these
 methods, for example:

     // getting/setting variable in global context
     blackboard.set('testKey', 'value');
     var value = blackboard.get('testKey');

     // getting/setting variable in per tree context
     blackboard.set('testKey', 'value', tree.id);
     var value = blackboard.get('testKey', tree.id);

     // getting/setting variable in per node per tree context
     blackboard.set('testKey', 'value', tree.id, node.id);
     var value = blackboard.get('testKey', tree.id, node.id);

 Note: Internally, the blackboard store these memories in different
 objects, being the global on `_baseMemory`, the per tree on `_treeMemory`
 and the per node per tree dynamically create inside the per tree memory
 (it is accessed via `_treeMemory[id].nodeMemory`). Avoid to use these
 variables manually, use `get` and `set` instead.